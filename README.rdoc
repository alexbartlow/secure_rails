= Secure Rails

Securing your rails applications is no harder than securing any other web application.

That is to say, there isn't a whole lot that's done about collecting the cross-cutting concern of security into a cohesive set of policy files.

Secure Rails makes securing your rails applications suck less.

== Basics

Before you do anything, you'll need to install the plugin:

rails plugin install http://github.com/alexbartlow/secure_rails.git

Also, any object you plan on using as an 'Authenticator' must have a +role_on+ method defined.

This role_on method will either be passed an instance of a controller, or a model object to be updated. You might implement it like this:
  
  class User < ActiveRecord::Base
    def role_on(object)
      if object.is_a?(ApplicationController)
        controller_role_on(object)
      else
        if self.role == :admin
          :admin
        elsif object == self
          :self
        else 
          :default
        end
      end
    end
    
    def controller_role_on(object)
      if self.role == :admin
        :admin
      elsif object.is_a?(UsersController) && object.params[:id].to_i == self.id
        :self
      else
        :default
      end
    end
  end
  
As you can see, this can quickly get out of hand - but role-based authorization is really an application specific thing. Figure out a DRY way of doing it that works for your app, and you'll be set to go. After this, it's smooth sailing.

Now you can use the +security+ generators for Coarse (controller) and Fine (attribute) grained access to your application. Stick +require 'security'+ in your application controller, and it'll require all of your security policy files under lib/security.

== Fine-Grained Attribute Access Control

  rails g security:model User

  # lib/security/models/user.rb
   Secure(User) do |u|
     u.policy(:default) do
       attr_accessible # complete lockdown
     end
     
     u.policy(:self) do
       attr_accessible :name, :email # The user himself can edit name and email
     end
     
     u.policy(:admin, :include => :self) do
       attr_accessible :status # moderators can edit status
     
       validates_exclusion_of :status, :in => [:banned_forever], 
         :unless => :skip_status_validation
         
       def skip_status_validation ; false ; end
       # but the moderator cannot set the status to banned forever
     end
     
     u.policy(:manager) do
      # this doesn't do anything, but is here to show that you can use include to
      # pull in multiple roles
     end
     
     u.policy(:super_admin, :include => [:admin, :manager]) do
       def skip_status_validation ; true ; end 
         # superadmins skip the status validation check
     end
     
     # policies always take precidence over the policies they include.
     # That's why the super-admin policy works.
   end

You use it like this, assuming that you have a +current_user+ method detailed in your controller that gives you the current user.

    def update
      @user = User.find(params[:id])
      if @user.secure_update_attributes(current_user, params[:user])
        redirect_to @user
      else
        render :action => @edit
      end
    end
    
As you can see, you can use both validations and attr_accessible in your policy declaration. This secures and locks down all of the mass-assignment in your code.

If you'd like to make sure that a hapless developer doesn't use update_attributes instead of the secure version, then make those methods private. Otherwise, as long as you use the secure version, your policy scripts will be in place.

== Coarse-grained Controller Access Control

When you run the following generator:

  rails g security:controller UsersController
  
You'll get an access control filter in lib/security/access_control.rb. By default, it looks for a +current_user+ method on your controller to do the authentication. Again, this is application specific. After you implement +current_user+, drop a before filter into your +ApplicationController+ :

  before_filter Security::AccessControl
  
It's also a good idea to have a default policy for your application controller, to catch where you've not declared one for the child controller. You'll get an error otherwise.

Now you can declare controller level access controls:

    # lib/security/controllers/users_controller.rb
    SecureController(UsersController) do |u|
      u.policy(:default) do
        # Don't allow unprivileged users to change anything
        if [:create, :update].include?(params[:action])
          raise SecurityTransgression.new
        end
      end
    end

These blocks will be evaluated in the context of your controller, so you can redirect, use flashes, log errors, the whole nine yards.

== Todos:

I'd like to work named scopes into this somehow, I'm envisioning an API like:

    u.finder_scope(:default) do |user|
      where(:id => user.id)
    end
    
    u.finder_scope(:manager) do |u|
      where(:manager_id => :user.id)
    end
    
This really isn't too terribly hard, and can be pulled off rather easily.