= Secure Rails

Mass-assignment is an awesome feature, especially combined with nested attributes, and the ability to use virtual attributes to cause extra effects - and have those be part of a form with zero extra work.

The problem with mass-assignment is that it encourages you to either abandon security, or have to very verbosely declare all of your permissible attributes in the controller, depending on which user is logged in.

Obviously, this cross-cutting concern spread over all of your controllers sucks.

Secure Rails is here to make it suck less.

You'll need at least one policy file like the following:

  # lib/user_security_policy.rb
   Secure(User) do |u|
     u.policy(:default) do
       attr_accessible # complete lockdown
     end
     
     u.policy(:self) do
       attr_accessible :name, :email # The user himself can edit name and email
     end
     
     u.policy(:admin, :include => :self) do
       attr_accessible :status # moderators can edit status
     
       validates_exclusion_of :status, :in => [:banned_forever], 
         :unless => :skip_status_validation
         
       def skip_status_validation ; false ; end
       # but the moderator cannot set the status to banned forever
     end
     
     u.policy(:super_admin, :include => :admin) do
       def skip_status_validation ; true ; end 
         # superadmins skip the status validation check
     end
     
     # policies always take precidence over the policies they include.
     # That's why the super-admin policy works.
   end

And then you'll need a +role_on+ method on whatever object that represents your authentication. So for example, from the test cases:

    def role_on(user)
      if user == self
        :self
      elsif self.role
        self.role
      else
        :default
      end
    end
    
What this gives you is the ability to do per-role authorization on your models.

You use it like this, assuming that you have a +current_user+ method detailed in your controller that gives you the current user.

    def update
      @user = User.find(params[:id])
      if @user.secure_update_attributes(current_user, params[:user])
        redirect_to @user
      else
        render :action => @edit
      end
    end
    
As you can see, you can use both validations and attr_accessible in your policy declaration.

== Todos:

I'd like to work named scopes into this somehow, but to do that we'll need a +role_on_class(klass)+ method. I'm envisioning an API like:

    u.finder_scope(:default) do |user|
      where(:id => user.id)
    end
    
    u.finder_scope(:manager) do |u|
      where(:manager_id => :user.id)
    end
    
This really isn't too terribly hard, and can be pulled off rather easily, it just requires the user throwing another method into the mix.

I'd also like to have the ability for support multiple roles, so if someone is both a +:manager+ and a +:direct_supervisor+ on a certain model, they get both roles applied to them. Likewise, I'd like to be able to mix multiple policies into one, so +:include => [:self, :manager]+ could be a valid line.

More under the hood, right now I have to hack around +remove_attributes_protected_from_mass_assignment+ to make that method check the metaclass. Ideally, I'd like to not rely so much on an alias_method_chain around a private method, so that'll entail implementing the metaclass-based filtering in the module directly.